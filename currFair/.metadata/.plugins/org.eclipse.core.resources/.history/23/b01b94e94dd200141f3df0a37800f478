
package com.example.currFair.api.dao.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;


import com.example.currFair.api.dao.MessageDAO;
import com.example.currFair.api.manager.MessageManager;
import com.example.currFair.api.model.MessageLocation;
import com.example.currFair.api.model.TradeMessage;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.inject.Inject;
import com.google.inject.name.Named;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import java.net.URL;
import java.net.URLEncoder;



public class MessageDAOImpl extends AbstractDAO implements MessageDAO
{
	@Inject @Named("geocoding.api.key")
	String key;
	
	private static final String GEOCODER_REQUEST_PREFIX_FOR_XML = "https://maps.google.com/maps/api/geocode/xml";
	
    public void  saveMessages(List<TradeMessage> tradeMessages)
    {
    	List<MessageLocation> messageLocations = new ArrayList<MessageLocation>();
    	for (TradeMessage tradeMessage : tradeMessages) {
    		//Key messageKey = KeyFactory.createKey( EntityKey,);	    	    
    	    Entity messageEntity = new Entity("TradeMessage");
    	    messageEntity.setProperty("userId", tradeMessage.getUserId());
    	    messageEntity.setProperty("amountBuy", tradeMessage.getAmountBuy());
    	    messageEntity.setProperty("amountSell", tradeMessage.getAmountSell());
    	    messageEntity.setProperty("currencyFrom", tradeMessage.getCurrencyFrom());
    	    messageEntity.setProperty("currencyTo", tradeMessage.getCurrencyTo());
    	    messageEntity.setProperty("originatingCountry", tradeMessage.getOriginatingCountry());
    	    messageEntity.setProperty("rate", tradeMessage.getRate());
    	    messageEntity.setProperty("timePlaced", tradeMessage.getTimePlaced());
    	    messageEntity.setProperty("crtDate", Calendar.getInstance().getTime());
    	    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    	    datastore.put(messageEntity);
    	   }
    	
    }
    
    public void getGeocoding(List<TradeMessage> tradeMessages)
    {
    	for (TradeMessage tradeMessage : tradeMessages) 
    	{
    		 String address = tradeMessage.getOriginatingCountry();
			Document geocoderResultDocument = getGeoCoding(address, key);
			XPath xpath = XPathFactory.newInstance().newXPath();

			// extract the result
			NodeList resultNodeList = null;
			resultNodeList = (NodeList) xpath.evaluate("/GeocodeResponse/*",
					geocoderResultDocument, XPathConstants.NODESET);
			String status = "";
			String message = "";

			for (int i = 0; i < resultNodeList.getLength(); ++i) {
				Node node = resultNodeList.item(i);
				if ("status".equals(node.getNodeName()))
					status = node.getTextContent();
				if ("message".equals(node.getNodeName()))
					message = node.getTextContent();
			}

			if (status.equalsIgnoreCase("OVER_QUERY_LIMIT")) {
				Thread.sleep(1000);
				geocoderResultDocument = getGeoCoding(address, key);
				resultNodeList = (NodeList) xpath.evaluate(
						"/GeocodeResponse/*", geocoderResultDocument,
						XPathConstants.NODESET);
				for (int i = 0; i < resultNodeList.getLength(); ++i) {
					Node node = resultNodeList.item(i);
					if ("status".equals(node.getNodeName()))
						status = node.getTextContent();
					if ("message".equals(node.getNodeName()))
						message = node.getTextContent();
				}
			}
	            
		}
    }
    
    public Document getGeoCoding(String address,String key)
	{
		Document geocoderResultDocument = null;
		
		// Create all-trusting host name verifier
		
		try{
		  URL url = new URL(GEOCODER_REQUEST_PREFIX_FOR_XML + "?address=" + URLEncoder.encode(address, "UTF-8") + "&sensor=false&key="+key);
          HttpURLConnection conn = (HttpURLConnection) url.openConnection();

          
          try {
            // open the connection and get results as InputSource.
            conn.connect();
            InputSource geocoderResultInputSource = new InputSource(conn.getInputStream());

            // read result and parse into XML Document
            geocoderResultDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(geocoderResultInputSource);
          } finally {
            conn.disconnect();
          }
         
		}catch (Exception e) {
			log.debug(e);
			e.printStackTrace();
			
		}
		log.debug(geocoderResultDocument);
		return geocoderResultDocument;
	}
    
    public List<TradeMessage> listMessages()
    {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();	    
	    Query query = new Query("TradeMessage").addSort("crtDate", Query.SortDirection.DESCENDING);
	    List entities = datastore.prepare(query).asList(FetchOptions.Builder.withLimit( 100 ));
	    List<TradeMessage> tradeMessages = new ArrayList<TradeMessage>();
	    if( entities != null && entities.size() > 0 ) {
	    	for( Object ob	: entities ) {
	    		Entity entity = (Entity) ob;
	    		TradeMessage tradeMessage = new TradeMessage();
	    		tradeMessage.setAmountBuy((Double)entity.getProperty("amountBuy"));
	    		tradeMessage.setAmountSell((Double)entity.getProperty("amountSell"));
	    		tradeMessage.setCurrencyFrom((String)entity.getProperty("currencyFrom"));
	    		tradeMessage.setCurrencyTo((String)entity.getProperty("currencyTo"));
	    		tradeMessage.setUserId((String)entity.getProperty("userId"));
	    		tradeMessage.setOriginatingCountry((String)entity.getProperty("originatingCountry"));
	    		tradeMessage.setTimePlaced((String)entity.getProperty("timePlaced"));
	    		tradeMessage.setRate((Double)entity.getProperty("rate"));
	    		tradeMessages.add(tradeMessage);
	    	}
	    }
	    return tradeMessages;
    }
    
    public List<MessageLocation> listMessagesLocations()
    {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();	    
	    Query query = new Query("MessageLocation");
	    List entities = datastore.prepare(query).asList(FetchOptions.Builder.withDefaults());
	    List<MessageLocation> messageLocations = new ArrayList<MessageLocation>();
	    if( entities != null && entities.size() > 0 ) {
	    	for( Object ob	: entities ) {
	    		Entity entity = (Entity) ob;
	    		MessageLocation messageLocation = new MessageLocation();
	    		messageLocation.setLat((Float)entity.getProperty("lat"));
	    		messageLocation.setLng((Float)entity.getProperty("lng"));
	    		
	    		messageLocations.add(messageLocation);
	    	}
	    }
	    return messageLocations;
    }
   
    public void  saveMessagesLocations(List<MessageLocation> messageLocations)
    {
    	for (MessageLocation messageLocation : messageLocations) {
    		//Key messageKey = KeyFactory.createKey( EntityKey,);	    	    
    	    Entity locationEntity = new Entity("MessageLocation");
    	    locationEntity.setProperty("lat", messageLocation.getLat());
    	    locationEntity.setProperty("lng", messageLocation.getLng());
    	   
    	    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    	    datastore.put(locationEntity);
		}
    	
    }
}
