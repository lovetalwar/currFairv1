/*****************************************************************************
 *                                                                           *
 *                       Copyright (c) 2012-2013 London Hydro                *
 *                            ALL RIGHTS RESERVED                            *
 *                                                                           *
 *****************************************************************************
 *
 *  File Name:  RequestLogger.java
 *
 *  Facility:   London Hydro Utils
 *
 *  Author:     Juan Pablo Francisconi, Affinity Systems
 *
 *  Revision History
 *
 *  Date        Author              Description
 *  -------     ------------------  -----------------------------------------
 *  10Jan13     Juan Pablo Francisconi 	Original version
 */

package com.londonhydro.utils.response.logger;

import java.util.concurrent.atomic.AtomicLong;

/**
 * Request Logger entity - thread local logger.
 * 
 * @author Juan Pablo Francisconi (jpfrancisconi@affsys.com)
 */
public class RequestLogger
{

    private static AtomicLong requestNumber = new AtomicLong(0);
    private static RequestLogger instance = null;
    private ThreadLocalLogger logger = new ThreadLocalLogger();

    private synchronized static void createInstance()
    {
        if (instance == null)
        {
            instance = new RequestLogger();
        }
    }

    public static RequestLogger getInstance()
    {
        if (instance == null)
        {
            createInstance();
        }
        return instance;
    }

    public ThreadLocalLogger getLogger()
    {
        return logger;
    }

    public static class ThreadLocalLogger extends ThreadLocal<Long>
    {
        public Long initialValue()
        {
            return 0L;
        }

        public Long getRequestId()
        {
            return (Long) super.get();
        }

        public Long incrementRequestId()
        {
            Long requestId = requestNumber.incrementAndGet();
            this.set(requestId);
            return requestId;
        }
    }

    public void remove()
    {
        logger.remove();
    }

    public Long getRequestId()
    {
        return logger.getRequestId();
    }
}
