

package com.example.currFair.api.interceptors;

import java.io.IOException;

import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.ext.Provider;

import org.jboss.resteasy.annotations.interception.ServerInterceptor;
import org.jboss.resteasy.spi.interception.MessageBodyWriterContext;
import org.jboss.resteasy.spi.interception.MessageBodyWriterInterceptor;

import com.londonhydro.utils.response.logger.DebugLogger;
import com.londonhydro.utils.response.logger.RequestLogger;

/**
 * This class is going to work as a response wrapper in charge of adding data
 * which is not presented in the response generated by the service layer.
 * Therefore we won't add overhead in each call with redundant information.
 * Example: debug mode is going to be added only if the client wants to.
 * 
 * @author Juan Pablo Francisconi (jpfrancisconi@affsys.com)
 */
@Provider
@ServerInterceptor
public class ResponseInterceptor implements MessageBodyWriterInterceptor
{
    @Inject
    @Named("londonhydro.api.cache")
    private String CACHE_STATUS;

    public void write(MessageBodyWriterContext ctx) throws IOException, WebApplicationException
    {
       if(CACHE_STATUS.equals("false"))
           ctx.getHeaders().putSingle("Cache-Control", "no-cache");
       
       
       removeThreadLocal();  
       ctx.proceed();
    }

    private void removeThreadLocal()
    {
        DebugLogger.getInstance().remove();
        RequestLogger.getInstance().remove();
    }
}
