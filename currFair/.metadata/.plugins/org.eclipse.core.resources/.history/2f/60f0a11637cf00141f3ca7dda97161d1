

package com.example.currFair.api.util;

import com.londonhydro.utils.response.attr.DebugAttribute;
import com.londonhydro.utils.response.details.AuthDetail;
import com.londonhydro.utils.response.details.DatabaseDetail;
import com.londonhydro.utils.response.details.RequestDetail;
import com.londonhydro.utils.response.details.ServiceDetail;
import com.londonhydro.utils.response.details.TimingDetail;

/**
 * Debug logger - thread local variable.
 * 
 * @author Juan Pablo Francisconi (jpfrancisconi@affsys.com)
 */
public class DebugLogger
{

    private static DebugLogger instance = null;
    private boolean isAlive = false;

    private synchronized static void createInstance()
    {
        if (instance == null)
        {
            instance = new DebugLogger();
        }
    }

    public static DebugLogger getInstance()
    {
        if (instance == null)
        {
            createInstance();
        }
        return instance;
    }

    private static class ThreadLocalDebugger extends ThreadLocal<DebugAttribute>
    {
        public DebugAttribute initialValue()
        {
            return new DebugAttribute();
        }

        public DebugAttribute getDebugger()
        {
            return (DebugAttribute) super.get();
        }
    }

    private ThreadLocalDebugger debugger = new ThreadLocalDebugger();

    public void remove()
    {
        debugger.remove();
    }

    public DebugAttribute getDebugAttribute()
    {
        return debugger.getDebugger();
    }

    public boolean isAlive()
    {
        return isAlive;
    }

    public void setAuthDetail(AuthDetail authDetail)
    {
        activate();
        debugger.getDebugger().setAuthDetail(authDetail);
    }

    public void setDatabaseDetail(DatabaseDetail dbDetail)
    {
        activate();
        debugger.getDebugger().setDatabaseDetail(dbDetail);
    }

    public void setRequestDetail(RequestDetail reqDetail)
    {
        activate();
        debugger.getDebugger().setRequestDetail(reqDetail);
    }

    public void setTimingDetail(TimingDetail timingDetail)
    {
        activate();
        debugger.getDebugger().setTimingDetail(timingDetail);
    }

    public void setServiceDetail(ServiceDetail serviceDetail)
    {
        activate();
        debugger.getDebugger().setServiceDetail(serviceDetail);
    }

    private void activate()
    {
        isAlive = true;
    }

}