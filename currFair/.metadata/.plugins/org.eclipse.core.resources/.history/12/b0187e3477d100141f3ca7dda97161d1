/*****************************************************************************
 *                                                                           *
 *                       Copyright (c) 2012-2013 London Hydro                *
 *                            ALL RIGHTS RESERVED                            *
 *                                                                           *
 *****************************************************************************
 *
 *  File Name:  ApiGuiceModule.java
 *
 *  Facility:   London Hydro API
 *
 *  Author:     Juan Pablo Francisconi, Affinity Systems
 *
 *  Revision History
 *
 *  Date        Author              Description
 *  -------     ------------------  -----------------------------------------
 *  10Jan13     Juan Pablo Francisconi 	Original version
 */

package com.example.currFair.api.inject;

import java.util.Properties;

import org.jboss.resteasy.plugins.interceptors.SecurityInterceptor;
import org.jboss.util.property.PropertyManager;

import com.example.currFair.api.manager.MessageManager;
import com.example.currFair.api.manager.impl.MessageManagerImpl;
import com.example.currFair.api.service.MessageService;
import com.example.currFair.api.service.impl.MessageServiceImpl;
import com.example.currFair.api.util.ApiTransaction;
import com.example.currFair.api.util.PropertiesUtil;
import com.example.currFair.api.util.UserContextHolder;
import com.google.appengine.api.utils.SystemProperty;
import com.google.inject.AbstractModule;
import com.google.inject.Key;
import com.google.inject.Singleton;
import com.google.inject.name.Names;
import com.google.inject.servlet.RequestScoped;
import com.google.inject.servlet.SessionScoped;

/**
 * This module summarizes any configuration needed for this web project,
 * typically it has an interface bindings, which will be used either to create
 * an Injector or inject directly using @inject. It is strictly necessary to add
 * this module into a web.xml file unless it's not going to be referred.
 * 
 * @author Juan Pablo Francisconi (jpfrancisconi@affsys.com)
 */
public class ApiGuiceModule extends AbstractModule
{

    private Properties properties;

    public ApiGuiceModule()
    {
        loadProperties();
    }

    public Properties loadProperties()
    {
        properties = PropertiesUtil.getInstance().loadProperties("/api.properties");
        String path = System.getProperty("api.properties.path");
        if (path != null && this.properties != null)
        {
            properties.putAll(PropertiesUtil.getInstance().loadProperties(path));
        }
        return properties;
    }

    @Override
    public void configure()
    {
        
        Names.bindProperties(binder(), properties);
        
        initContext();

        initProviders();

        initMisc();

        initManagers();

        initServices();
        
        
    }
    
    private void initContext()
    {
        bindScope(RequestScoped.class, com.google.inject.servlet.ServletScopes.REQUEST);
        bindScope(SessionScoped.class, com.google.inject.servlet.ServletScopes.SESSION);
        bind(Key.get(UserContextHolder.class, Names.named("userContextHolder"))).to(UserContextHolder.class).in(RequestScoped.class);
        bind(Key.get(ApiTransaction.class, Names.named("transaction"))).to(ApiTransaction.class).in(RequestScoped.class);
      
    }

    private void initManagers()
    {
        bind(MessageManager.class).to(MessageManagerImpl.class).in(Singleton.class);
       
    }

    private void initServices()
    {
        bind(MessageService.class).to(MessageServiceImpl.class).in(Singleton.class);
       
    }

    private void initMisc()
    {
       
    }

    
    private void initProviders()
    {
       // binder().bind(BrokerConnectionProvider.class).asEagerSingleton();
        bind(SecurityInterceptor.class).in(Singleton.class);
      /*  bind(ResponseHeadersInterceptor.class).in(Singleton.class);
        bind(RequestInterceptor.class).in(Singleton.class);
        bind(RuntimeExceptionMapper.class).in(Singleton.class);
        bind(MethodConstraintViolationExceptionMapper.class).in(Singleton.class);
        bind(BadRequestExceptionMapper.class).in(Singleton.class);
        bind(DefaultOptionsMethodExceptionMapper.class).in(Singleton.class);
        bind(InternalServerErrorMapper.class).in(Singleton.class);
        bind(MethodNotAllowedExceptionMapper.class).in(Singleton.class);
        bind(NotAcceptableExceptionMapper.class).in(Singleton.class);
        bind(NotFoundExceptionMapper.class).in(Singleton.class);
        bind(UnauthorizedExceptionMapper.class).in(Singleton.class);
        bind(WebApplicationExceptionMapper.class).in(Singleton.class);
        bind(SQLExceptionMapper.class).in(Singleton.class);
        bind(ResponseResolver.class).in(Singleton.class);
        bind(CSVMessageBodyWriter.class).in(Singleton.class);
        bind(MemcacheProvider.class).in(Singleton.class);
        bind(EspiContextResolver.class).in(Singleton.class);
        bind(ResponseInterceptor.class).in(Singleton.class);*/
    }
    
  
}
